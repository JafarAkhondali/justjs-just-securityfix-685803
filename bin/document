#!/bin/bash

TAG="$1"
VERSION="${TAG/v/}"
ROOT="${BASH_SOURCE%/*}/.." # Source: https://stackoverflow.com/a/12694189
PUBLIC_DIR='docs/public'
TEMP_PUBLIC_DIR="$PUBLIC_DIR.temp"
DESTINATION_DIR="$PUBLIC_DIR/$TAG"
TEMP_DESTINATION_DIR="$TEMP_PUBLIC_DIR/$TAG"
AVAILABLE_VERSIONS=(`./bin/get-available-versions`)
runJsdoc=true

# Source: https://stackoverflow.com/a/13359121
for arg in "$@"; do

	case $arg in
		--run-jsdoc=* )

			runJsdoc="${arg#*=}"

			;;
	esac

done

cd "$ROOT"

isValidTag () {
	[[ "$1" =~ ^v[x0-9] ]]
}

copyContents () {

	local FROM=$1
	local TO=$2

	echo "[Docs] Copying the contents of $FROM to $TO"
	mkdir -p "$TO"
	cp "$FROM"/* "$TO" -R

}

copyStaticFiles () {

	copyContents docs/static/versioned "$TEMP_DESTINATION_DIR"
	copyContents docs/static/non-versioned "$TEMP_PUBLIC_DIR"

}

replaceStaticFileVars () {

	local FILENAME="$1"
	# Next line based on:
	# - Sort array: https://stackoverflow.com/a/11789688
	# - Sort by version: https://gist.github.com/loisaidasam/b1e6879f3deb495c22cc#gistcomment-3008151
	local availableVersionsDesc=(`IFS=$'\n' && tr - \~ <<< "${AVAILABLE_VERSIONS[*]}" | sort -rV | tr \~ - && unset IFS`)
	local availableVersionsTable=`./docs/tmpl/available-versions-table "${availableVersionsDesc[@]}"`
	local latestVersion="$VERSION"
	local browserExampleFilename="dist/browser/core.min.js"
	local browserExampleUrl="https://cdn.jsdelivr.net/npm/@just-js/just@$latestVersion/$browserExampleFilename"
	local browserExampleSri=`./bin/generate-sri "$browserExampleFilename"`
	declare -A variables=(
		[version]="$VERSION"
		[tag]="$TAG"
		[available-versions]="$AVAILABLE_VERSIONS"
		[available-versions-table]="$availableVersionsTable"
		[sri]="$sri"
		[latest-version]="$VERSION"
		[browser-example-url]="$browserExampleUrl"
		[browserExampleSri]="$browserExampleSri"
	)
	echo "[Docs] Replacing vars in $FILENAME"

	while read line; do

		replacedText="$line"

		for key in "${!variables[@]}"; do

			value="${variables[$key]}"
			token="%{${key}}%"
			replacedText="${replacedText//$token/$value}"

		done

		echo "$replacedText"

	done < "$FILENAME" > "$FILENAME.temp"

	mv "$FILENAME.temp" "$FILENAME"

}

document () {

	local BUILD_NAME=$1
	local DESTINATION="$TEMP_DESTINATION_DIR/$BUILD_NAME"

	echo "[Docs] Generating docs at $DESTINATION"
	npm run doc:jsdoc -- "dist/$BUILD_NAME" -d "$DESTINATION"

}

if ! isValidTag "$TAG"; then

	echo "[Docs] You should provide a release tag."
	exit 1

fi

if [ ! -d "dist" ]; then
	npm run build
fi

copyStaticFiles
replaceStaticFileVars "$TEMP_DESTINATION_DIR/index.html"
replaceStaticFileVars "$TEMP_PUBLIC_DIR/index.html"

if [ "$runJsdoc" = true ]; then

	document browser
	document server

fi

npm run doc:minify -- --input-dir "$TEMP_PUBLIC_DIR" --output-dir "$TEMP_PUBLIC_DIR"
# Don't rename $PUBLIC_DIR. Doing so will make live-server's reloads stop working.
cp -R "$TEMP_PUBLIC_DIR"/* "$PUBLIC_DIR"
