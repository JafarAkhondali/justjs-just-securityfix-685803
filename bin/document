#!/bin/bash

VERSION=$1
ROOT="${BASH_SOURCE%/*}/.." # Source: https://stackoverflow.com/a/12694189
PUBLIC_DIR='docs/public'
DESTINATION_DIR="$PUBLIC_DIR/$VERSION"

cd "$ROOT"

isValidVersion () {
	[[ "$1" =~ ^v[0-9] ]]
}

copyContents () {

	local FROM=$1
	local TO=$2

	echo "[Docs] Copying the contents of $FROM to $TO"
	mkdir -p "$TO"
	cp "$FROM"/* "$TO" -R

}

copyStaticFiles () {

	copyContents docs/static/versioned "$DESTINATION_DIR"
	copyContents docs/static/non-versioned "$PUBLIC_DIR"

}

getAvailableVersions () {

	local availableVersions=()
	local version

	for dirname in $(ls -d "$PUBLIC_DIR"/*/); do

		version=${dirname::-1} # Remove last slash.
		version=${version/$PUBLIC_DIR\//}

		if isValidVersion "$version"; then
			availableVersions+=("$version")
		fi

	done

	echo "${availableVersions[@]}"

}

replaceStaticFileVars () {

	local FILENAME=$1
	local availableVersions=`getAvailableVersions`
	local replacedText

	echo "[Docs] Replacing vars in $FILENAME"

	while read line; do

		replacedText=${line//\%\{version\}\%/$VERSION}
		replacedText=${replacedText//\%\{available\-versions\}\%/$availableVersions}

		echo "$replacedText"

	done < "$FILENAME" > "$FILENAME.temp"

	mv "$FILENAME.temp" "$FILENAME"

}

document () {

	local BUILD_NAME=$1
	local DESTINATION="$DESTINATION_DIR/$BUILD_NAME"
	
	if [ ! -d "dist" ]; then
		npm run build
	fi

	echo "[Docs] Generating docs at $DESTINATION"
	npm run doc:jsdoc -- "dist/$BUILD_NAME" -d "$DESTINATION"

}

if ! isValidVersion "$VERSION"; then

	echo "[Docs] You should provide a release tag."
	exit 1

fi

copyStaticFiles
replaceStaticFileVars "$DESTINATION_DIR/index.html"
replaceStaticFileVars "$PUBLIC_DIR/index.html"
document browser
document server
